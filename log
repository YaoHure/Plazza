==23994== Memcheck, a memory error detector
==23994== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==23994== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==23994== Command: ./plazza 20 20 50000
==23994== 
==24003== Thread 4:
==24003== Conditional jump or move depends on uninitialised value(s)
==24003==    at 0x403490: Cooker::manageIngredient(Pizza const*, Cooker::Action) (Cooker.cpp:26)
==24003==    by 0x40357A: Cooker::createPizza(Pizza const*) (Cooker.cpp:51)
==24003==    by 0x40371E: startCreatePizza(void*) (Cooker.cpp:70)
==24003==    by 0x412204: ThreadPool::pendingFunc() (ThreadPool.cpp:55)
==24003==    by 0x412452: thread_start(void*) (ThreadPool.cpp:88)
==24003==    by 0x52950DA: start_thread (in /lib64/libpthread-2.18.so)
==24003==    by 0x5DB3DAC: clone (in /lib64/libc-2.18.so)
==24003== 
==24003== Conditional jump or move depends on uninitialised value(s)
==24003==    at 0x40341D: Cooker::manageIngredient(Pizza const*, Cooker::Action) (Cooker.cpp:29)
==24003==    by 0x40357A: Cooker::createPizza(Pizza const*) (Cooker.cpp:51)
==24003==    by 0x40371E: startCreatePizza(void*) (Cooker.cpp:70)
==24003==    by 0x412204: ThreadPool::pendingFunc() (ThreadPool.cpp:55)
==24003==    by 0x412452: thread_start(void*) (ThreadPool.cpp:88)
==24003==    by 0x52950DA: start_thread (in /lib64/libpthread-2.18.so)
==24003==    by 0x5DB3DAC: clone (in /lib64/libc-2.18.so)
==24003== 
==24003== Invalid read of size 8
==24003==    at 0x40336F: Cooker::manageIngredient(Pizza const*, Cooker::Action) (Cooker.cpp:31)
==24003==    by 0x40357A: Cooker::createPizza(Pizza const*) (Cooker.cpp:51)
==24003==    by 0x40371E: startCreatePizza(void*) (Cooker.cpp:70)
==24003==    by 0x412204: ThreadPool::pendingFunc() (ThreadPool.cpp:55)
==24003==    by 0x412452: thread_start(void*) (ThreadPool.cpp:88)
==24003==    by 0x52950DA: start_thread (in /lib64/libpthread-2.18.so)
==24003==    by 0x5DB3DAC: clone (in /lib64/libc-2.18.so)
==24003==  Address 0x1002 is not stack'd, malloc'd or (recently) free'd
==24003== 
==24003== 
==24003== Process terminating with default action of signal 11 (SIGSEGV)
==24003==  Access not within mapped region at address 0x1002
==24003==    at 0x40336F: Cooker::manageIngredient(Pizza const*, Cooker::Action) (Cooker.cpp:31)
==24003==    by 0x40357A: Cooker::createPizza(Pizza const*) (Cooker.cpp:51)
==24003==    by 0x40371E: startCreatePizza(void*) (Cooker.cpp:70)
==24003==    by 0x412204: ThreadPool::pendingFunc() (ThreadPool.cpp:55)
==24003==    by 0x412452: thread_start(void*) (ThreadPool.cpp:88)
==24003==    by 0x52950DA: start_thread (in /lib64/libpthread-2.18.so)
==24003==    by 0x5DB3DAC: clone (in /lib64/libc-2.18.so)
==24003==  If you believe this happened as a result of a stack
==24003==  overflow in your program's main thread (unlikely but
==24003==  possible), you can try to increase the size of the
==24003==  main thread stack using the --main-stacksize= flag.
==24003==  The main thread stack size used in this run was 8384512.
==24003== 
==24003== HEAP SUMMARY:
==24003==     in use at exit: 390,079 bytes in 410 blocks
==24003==   total heap usage: 453 allocs, 43 frees, 406,365 bytes allocated
==24003== 
==24003== LEAK SUMMARY:
==24003==    definitely lost: 0 bytes in 0 blocks
==24003==    indirectly lost: 0 bytes in 0 blocks
==24003==      possibly lost: 8,692 bytes in 81 blocks
==24003==    still reachable: 381,387 bytes in 329 blocks
==24003==         suppressed: 0 bytes in 0 blocks
==24003== Rerun with --leak-check=full to see details of leaked memory
==24003== 
==24003== For counts of detected and suppressed errors, rerun with: -v
==24003== Use --track-origins=yes to see where uninitialised values come from
==24003== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 2 from 2)
==23994== 
==23994== HEAP SUMMARY:
==23994==     in use at exit: 293,938 bytes in 209 blocks
==23994==   total heap usage: 320 allocs, 111 frees, 394,995 bytes allocated
==23994== 
==23994== LEAK SUMMARY:
==23994==    definitely lost: 1,040 bytes in 1 blocks
==23994==    indirectly lost: 42 bytes in 1 blocks
==23994==      possibly lost: 1,309 bytes in 9 blocks
==23994==    still reachable: 291,547 bytes in 198 blocks
==23994==         suppressed: 0 bytes in 0 blocks
==23994== Rerun with --leak-check=full to see details of leaked memory
==23994== 
==23994== For counts of detected and suppressed errors, rerun with: -v
==23994== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 2 from 2)
